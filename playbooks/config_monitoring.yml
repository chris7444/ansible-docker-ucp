---
- hosts: ucp ucp_lb
  gather_facts: false
  become_user: root
  become: true

  vars_files:
    - ../group_vars/vars

  environment: "{{ env }}"

  tasks:
    - name: Open required ports for Grafana and Prometheus
      command: firewall-cmd --permanent --zone=public --add-port=9090/tcp --add-port=3000/tcp

    - name: Reload firewalld configuration
      command: firewall-cmd --reload

    - name: Copy monitoring files to UCP
      copy: 
        src: ../monitoring
        dest: /root
        owner: root
        group: root
        mode: 0644
      when: inventory_hostname in groups.ucp

    - name: Copy docker compose file
      template: src=../monitoring/docker-compose.yml.j2 dest=/root/monitoring/docker-compose.yml
      when: inventory_hostname in groups.ucp

    - name: Deploy monitoring stack
      command: docker stack deploy --compose-file docker-compose.yml prom
      args:
        chdir: /root/monitoring
      when: inventory_hostname in groups.ucp_main

    - name: Wait for Prometheus to be available
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 9090
        delay: 15
      when: inventory_hostname in groups.ucp_main

    - name: Wait for Grafana to be available
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 3000
        delay: 15
      when: inventory_hostname in groups.ucp_main

    - name: Check if data source already available
      uri:
        url: "http://{{ inventory_hostname }}.{{ domain_name }}:3000/api/datasources/name/Prometheus"
        method: GET
        user: admin
        password: admin
        status_code: 200,404
        body_format: json
        force_basic_auth: yes
      when: inventory_hostname in groups.ucp_main
      register: ds

    - name: Create Grafana Data Source
      uri:
        url: "http://{{ inventory_hostname }}.{{ domain_name }}:3000/api/datasources"
        method: POST
        user: admin
        password: admin
        body: "{{ lookup('file','../monitoring/datasource.json') }}"
        status_code: 200
        body_format: json
        force_basic_auth: yes
      when: inventory_hostname in groups.ucp_main and ds.status == 404

    - name: Import Dashboard
      uri:
        url: "http://{{ inventory_hostname }}.{{ domain_name }}:3000/api/dashboards/db"
        method: POST
        user: admin
        password: admin
        body: {"dashboard": "{{ lookup('file','../monitoring/Docker-Swarm-Dashboard.json') }}","overwrite": true}
        status_code: 200
        body_format: json
        force_basic_auth: yes
      when: inventory_hostname in groups.ucp_main

    # not really needed but if someone makes a change to haproxy
    - name: Update haproxy.cfg on UCP Load Balancer
      template:
        src: ../templates/haproxy.cfg.ucp.j2
        dest: /etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: 0644
      when: inventory_hostname in groups.ucp_lb
      notify: Enable and start haproxy service

  handlers:
    - name: Enable and start haproxy service
      systemd:
        name: haproxy
        enabled: yes
        state: restarted

